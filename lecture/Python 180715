#발췌: 파이썬 답게 코딩하기 ; 심경섭 (iterator 부분)

'''
for 문 관련

#### iterable vs iterator ####

모든 iterator 객체는 iterable하다 => True
iterable이 보다 큰 개념

iterable 하다는 것은 한번에 하나씩 값을 반환할 수 있다.
~할 수 있다. 라는 것은 가능의 의미로 "이것만 된다!!!!"가 아니다.
정리하자면 iterable하다는 것은 한번에 모든 값을 반환할수도, 
한번에 하나씩만 반환할 수도 있다는 의미

iterator는 반면에 한번에 하나씩만 값을 반환하는 객체이다.

'''
#ex)
def main():
    x = [1,2,3]
    y = {"red":1, "blue":2, "green":3}
    
    x_iterator = iter(x)
    y_iterator = iter(y)
    
    print("===print type===")
    print("list type: %s"  % type(x))
    print("dict type: %s" % type(y))
    print("list iterator type: %s"  % type(x_iterator))
    print("dict iterator type: %s" % type(y_iterator))

    print(" print next ")
    print("list next: %s"  % next(x))
    print("dict next: %s" % next(y))
    print("list iterator 'next' : %s"  % next(x_iterator))
    print("dict iterator 'next' : %s" % next(y_iterator))

if __name__ == "__main__":
    main()  

'''
===print type===
list type: <class 'list'>
dict type: <class 'dict'>
list iterator type: <class 'list_iterator'>
dict iterator type: <class 'dict_keyiterator'>
 print next 
Traceback (most recent call last):

  File "<ipython-input-1-bd7eb88015e7>", line 1, in <module>
    runfile('C:/Users/KGITBank/.spyder-py3/temp.py', wdir='C:/Users/KGITBank/.spyder-py3')

  File "D:\new\lib\site-packages\spyder\utils\site\sitecustomize.py", line 705, in runfile
    execfile(filename, namespace)

  File "D:\new\lib\site-packages\spyder\utils\site\sitecustomize.py", line 102, in execfile
    exec(compile(f.read(), filename, 'exec'), namespace)

  File "C:/Users/KGITBank/.spyder-py3/temp.py", line 38, in <module>
    main()

  File "C:/Users/KGITBank/.spyder-py3/temp.py", line 32, in main
    print("list next: %s"  % next(x))

TypeError: 'list' object is not an iterator
'''

############################################################
'''
iterator가 그러면, iterable처럼 여러개의 값을 못갖냐고 하면 그건 아닙니다.
다만 한번에 하나씩 값을 반환하기 위해서는 어디까지 반환했고, 어디서부터
반환하면 되는지 그 상태를 알고 있어야 합니다.
'''
'''
for 문에서 이 이야기를 거론하는 이유는 리스트, 튜플 등은 iterable한 객체이지만
for문 사용시, 한개씩 값을 반환하는 것을 볼 수 있습니다.
ex) 
    a = [1,2,3,4,5]
    for i in a:

그래서 리스트를 iterator로 착각하는 경우가 있는데 그것은 잘못된 생각입니다.
for문에서 자동적으로 iterable 객체를 임시로 iterator로 변환하기 때문입니다.
'''
'''
#####
해당 개념을 잘 숙지해야 차후에 중급 레벨로 넘어가서 
generator와 yield에 대해 배울 때 혼동이 생기질 않습니다.
'''

############################################################################################################
#문제 1
result = 0
i = 1
while i <= 100:
    result += i #더한 값들을 누적
    i += 1 #하나씩 올려줌

print(result)
    
#%%
#문제 2
result = 0
i = 1
while i <= 1000:
    if i % 3 == 0:
        result += i
    
    i += 1
print(result)

#%%
#문제 3
a = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]
i = 0
sum = 0
while a and i<len(a):
    if a[i] >= 50:
        sum += a[i]
    i += 1
        
print(sum)        
#%%
#####################################################33
#리스트의 값 하나씩 뽑아내는 pop을 쓴 경우
a = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]
result_1 = 0
sum_list = []
while a:
    score = a.pop()
    if score >= 50:
        sum_list.append(score)
print(sum_list)

sum(sum_list)     

   
#%%
i = 0
while True:
    i += 1
    
    if i > 5: break
    print('*' * i)
    
#%%
star = 7
space = 0
while star > 0:
    print(' ' * space + '*' * star)
    star -= 2
    space += 1   

#%%
#문제 1 
for i in range(1, 101):
    print(i)
    
#문제 2
result = 0
for i in range(1, 1001):
    if i % 5 == 0 :
        result += i
print(result)
#%%
#문제 3
A = [70, 60, 55, 75, 95, 90, 80, 80, 85, 100]

print(sum(A)/len(A))

#또는

sum = 0
for score in A:
    sum += score

average = sum /len(A)
print(average)



#%%
#딕셔너리로 정리하면 편하다.
blood_type = ['A', 'B', 'A', 'O', 'AB', 'AB', 'O', 'A', 'B', 'O', 'B', 'AB']
A_count = 0
B_count = 0
O_count = 0
AB_count =0


for t in blood_type:
    if t == 'A':
        A_count += 1
    elif t == 'B':
        B_count += 1
    elif t == 'AB':
        AB_count += 1
    else:
        O_count += 1
        
print(A_count, B_count, O_count, AB_count)   
#%%
blood_type = ['A', 'B', 'A', 'O', 'AB', 'AB', 'O', 'A', 'B', 'O', 'B', 'AB']

result = {}
for t in blood_type:
    if t in result:
        result[t] += 1
    else:
        result[t] = 1
print(result)

#%%
number = [1,2,3,4,5]
result = [n*2 for n in number if n%2 == 1]
print(result)

#%%
vowels ='aeiou'
s = 'Life is too short, you need python'
result = [n for n in s if n not in vowels]
print(result)
print("".join(result))

        
        
        







