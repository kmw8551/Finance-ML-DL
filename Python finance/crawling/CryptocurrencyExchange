import json
import datetime
import pandas as pd
import pycurl
from datetime import datetime, timedelta
from io import BytesIO
import pytz
import pickle
import os.path
import functools
import time

def json_to_pandas_spot(data):
    data_ok = pd.DataFrame(data=None, columns=['DT', 'Open', 'High', 'Low', 'Close', 'Volume'])
    data_ok.rename(columns={
        'DT': "Okex-DT",
        'Open': "Okex-Open",
        'High': "Okex-High",
        'Low': "Okex-Low",
        'Close': "Okex-Close",
        'Volume': "Okex-Volume"

        }, inplace=True)
    data_dt = []
    data_open = []
    data_high = []
    data_low = []
    data_close = []
    data_volume = []

    for i in range(len(data)):
        data_dt.append(data[i][0])
        data_open.append(data[i][1])
        data_high.append(data[i][2])
        data_low.append(data[i][3])
        data_close.append(data[i][4])
        data_volume.append(data[i][5])



    data_ok['DT'] = data_dt
    data_ok['Okex-Open'] = data_open
    data_ok["Okex-High"] = data_high
    data_ok["Okex-Low"] = data_low
    data_ok["Okex-Close"] = data_close
    data_ok["Okex-Volume"] = data_volume

    # data_ok["DT"] = pd.to_datetime(data["DT"])

    data_ok['DT'] = [datetime.fromtimestamp(i, tz=pytz.UTC).astimezone(tz=pytz.timezone("Asia/Seoul")) for i in
                  pd.to_numeric(data_ok['DT'] / 1000)]
    data_ok.set_index('DT', inplace = True)
    data_ok.sort_index(inplace=True)
    data_ok = data_ok[~data_ok.index.duplicated(keep='last')]

    return data_ok


def json_to_pandas_fx(data):
    data_ok = pd.DataFrame(data=None, columns=['DT', 'Open', 'High', 'Low', 'Close', 'Amount'])
    data_ok.rename(columns={
        'DT': "Okex-DT",
        'Open': "Okex-Open",
        'High': "Okex-High",
        'Low': "Okex-Low",
        'Close': "Okex-Close",
        'Amount': "Okex-Volume"

        }, inplace=True)
    data_dt = []
    data_open = []
    data_high = []
    data_low = []
    data_close = []
    data_amount = []

    for i in range(len(data)):
        data_dt.append(data[i][0])
        data_open.append(data[i][1])
        data_high.append(data[i][2])
        data_low.append(data[i][3])
        data_close.append(data[i][4])
        data_amount.append(data[i][6])



    data_ok['DT'] = data_dt
    data_ok['Okex-Open'] = data_open
    data_ok["Okex-High"] = data_high
    data_ok["Okex-Low"] = data_low
    data_ok["Okex-Close"] = data_close
    data_ok["Okex-Volume"] = data_amount

    # data_ok["DT"] = pd.to_datetime(data["DT"])

    data_ok['DT'] = [datetime.fromtimestamp(i, tz=pytz.UTC).astimezone(tz=pytz.timezone("Asia/Seoul")) for i in
                  pd.to_numeric(data_ok['DT'] / 1000)]
    data_ok.set_index('DT', inplace = True)
    data_ok.sort_index(inplace=True)
    data_ok = data_ok[~data_ok.index.duplicated(keep='last')]

    return data_ok



###########################################################################################################
def get_okex_chart(coin, attribution, resolution):
    if not(isinstance(coin, str)):
        print(coin)
        raise Exception("coin needs to be a string or a string array")


    coin_1 = coin.split('/')
    coin_new = coin_1[0].lower() + "_" + coin_1[1].lower()

    okex_chart_url_template = 'https://www.okex.com/api/v1/kline.do?symbol={COIN}&type={RESOLUTION}hour&since={TIMESTAMP}'

    os.makedirs('Okex_Save/', exist_ok=True)
    pickle_prev = 'Okex_Save/tab_' + coin_new + '_' + str(resolution) + '_' + 'okex.pickle'
    timestamp = 1483196400000
    to_stamp = int(datetime.now().timestamp())
    until_stamp = to_stamp - 60 * 60 * 83 * 24
    json_long_list = []
    prev_to = 0

    if os.path.isfile(pickle_prev):
        print('reading...'+ pickle_prev)
        with open(pickle_prev, 'rb') as f:
            json_long_list = pickle.load(f)

    while (until_stamp < to_stamp and prev_to != to_stamp):
        prev_to = to_stamp
        url = okex_chart_url_template.format(COIN= coin_new, RESOLUTION= resolution, TIMESTAMP = timestamp)
        retries_left = 2
        delay_between_retries = 0.9
        while retries_left > 0:
            try:
                buffer = BytesIO()
                c = pycurl.Curl()
                print(url)
                c.setopt(c.URL, url)
                c.setopt(pycurl.HTTPHEADER, [
                    '''cookie: __cfduid=d86aedfb3012033f167ed67b0ed8f76651533119480; first_ref=https://www.google.co.kr/; perm=DB50D0DFAC4DF00929B4117BC7EB453E; 
                    lp=; _ga=GA1.2.1570748731.1533119483; _gid=GA1.2.1653176333.1533119483; Hm_lvt_b4e1f9d04a77cfd5db302bc2bcc6fe45=1533119483,1533173075; locale=en_US; 
                    __zlcmid=nhhXErfAByquDM; isLogin=1; kycNationality=KR; product=btc_usdt; Hm_lpvt_b4e1f9d04a77cfd5db302bc2bcc6fe45=1533174756; ref=https://www.okex.com/spot/full''',
                    'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',
                    'accept-language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
                    'authority: www.okex.com',
                    'x - requested -with: XMLHttpRequest'
                    ])

                c.setopt(c.WRITEDATA, buffer)
                c.setopt(pycurl.SSL_VERIFYPEER, 0)
                c.setopt(pycurl.SSL_VERIFYHOST, 0)
                c.perform()
                c.close()
                body = buffer.getvalue()
                server_message = body.decode('utf-8')
                time.sleep(1)
                if 'error' in server_message:
                    continue
                else:
                    data = json.loads(server_message)
                    json_to_pandas_spot(data)
                    break


            except BaseException as e:
                retries_left -=1
                print("retrying...")
                time.sleep(delay_between_retries)
    with open(pickle_prev, 'wb') as f:
        pickle.dump(data, f)
    return json_to_pandas_spot(data)
#########################################################################################################################################
#선물 차트 함수
#0803은 6월 21일 밤 9시 시작
def get_okex_fx_chart(coin, attribution, resolution):
    if not(isinstance(coin, str)):
        print(coin)
        raise Exception("coin needs to be a string or a string array")

    #최초 시점은 1483196400000 (2017, 1 ,1 )이지만 현재 차트상 제공하는 데이터는 6월 21일 것
    okex_fx_chart_url_template = 'https://www.okex.com/api/v1/future_kline.do?symbol={COIN}&type={RESOLUTION}hour&contract_type={CONTRACT}&since={TIMESTAMP}' #1517536000000
    os.makedirs('Okex_Save/', exist_ok=True)
    if '0810' in coin:
        contract_type = 'next_week'
        temp = coin.replace('/0810', "").lower()
        coin_new = temp + '_usd'
    elif '0928' in coin:
        contract_type = 'quarter'
        temp = coin.replace('/0928', "").lower()
        coin_new = temp + '_usd'
    pickle_prev = 'Okex_Save/tab_'+ coin_new + '_' + str(resolution) + '_' + 'okex.pickle'
    to_stamp = int(datetime.now().timestamp())
    until_stamp = to_stamp - 60 * 60 * 83 * 24
    json_long_list = []
    timestamp = 1529686800000
    prev_to = 0
    if os.path.isfile(pickle_prev):
        print('reading...'+ pickle_prev)
        with open(pickle_prev, 'rb') as f:
            try:
                json_long_list = pickle.load(f)
            except EOFError as e:
                json_long_list = []
                print ("failed to restore json list, fall back to an empty array")



    while (until_stamp < to_stamp and prev_to != to_stamp):
        prev_to = to_stamp
        url = okex_fx_chart_url_template.format(COIN= coin_new, RESOLUTION= resolution, CONTRACT= contract_type, TIMESTAMP= timestamp)
        retries_left = 3
        delay_between_retries = 0.5
        while retries_left > 0:
            try:
                buffer = BytesIO()
                c = pycurl.Curl()
                print(url)
                c.setopt(c.URL, url)
                c.setopt(pycurl.HTTPHEADER, [
                    '''cookie: __cfduid=d86aedfb3012033f167ed67b0ed8f76651533119480; first_ref=https://www.google.co.kr/;
                     perm=DB50D0DFAC4DF00929B4117BC7EB453E; _ga=GA1.2.1570748731.1533119483; _gid=GA1.2.1653176333.1533119483; Hm_lvt_b4e1f9d04a77cfd5db302bc2bcc6fe45=1533119483,1533173075; 
                     locale=en_US; __zlcmid=nhhXErfAByquDM; isLogin=1; kycNationality=KR; product=eth_usdt; lp=/future/full; currency=0; cont_btc=0; f_btc_contract_id=201808030000013; 
                     f_btc_depth_level=0.01; treatyType_Btc=201808030000013; f_symbol=1; f_ltc_depth_level=0.001; f_ltc_contract_id=201808100010035; treatyType_Ltc=201808100010035; 
                    ref=https://www.okex.com/futureTrade/futureMarket.do?currencyId=1&contractType=2; Hm_lpvt_b4e1f9d04a77cfd5db302bc2bcc6fe45=1533183709''',
                    'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',
                    'accept-language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
                    'authority: www.okex.com',
                    'x - requested -with: XMLHttpRequest'])

                c.setopt(c.WRITEDATA, buffer)
                c.setopt(pycurl.SSL_VERIFYPEER, 0)
                c.setopt(pycurl.SSL_VERIFYHOST, 0)
                c.perform()
                c.close()
                body = buffer.getvalue()
                server_message = body.decode('utf-8')
                time.sleep(1)
                if 'error' in server_message:
                    continue
                else:
                    data = json.loads(server_message)
                    json_to_pandas_fx(data)
                    break

            except BaseException as e:
                retries_left -=1
                print("retrying...")
                time.sleep(delay_between_retries)


    with open(pickle_prev, 'wb') as f:
        pickle.dump(data, f)

    return json_to_pandas_fx(data)



if __name__ == "__main__":
    dfs= get_okex_chart('ZCO/ETH','Close', 1)
    print(dfs)


코인베네 관련 코드

import pytz
import os.path
import pandas as pd
import json
import pycurl
import jvalue_mapper as jm
from io import BytesIO
from datetime import datetime, timedelta
import pytz
import time
import pickle
import functools


def json_to_pandas(data):
    data_cb = pd.DataFrame(data= None , columns=['t', 'o', 'c', 'l', 'h', 'v'])
    data_cb.rename(columns={
        't':'DT',
        'o':'Coinbene-Open',
        'c':'Coinbene-Close',
        'l':'Coinbene-Low',
        'h':'Coinbene-High',
        'v':'Coinbene-Volume'
    }, inplace= True)
    data_dic_keys = list(data.keys())
    data_dic_values = list(data.values())
    data_cb['DT'] = data_dic_values[0]
    data_cb['Coinbene-Open']= data_dic_values[1]
    data_cb['Coinbene-Close']= data_dic_values[2]
    data_cb['Coinbene-Low']= data_dic_values[3]
    data_cb['Coinbene-High']= data_dic_values[4]
    data_cb['Coinbene-Volume']= data_dic_values[5]

    data_cb['DT']= [datetime.fromtimestamp(i,tz=pytz.UTC).astimezone(tz=pytz.timezone('Asia/Seoul')) for i in pd.to_numeric(data_cb['DT'])]
    data_cb.set_index('DT', inplace=True)
    data_cb.sort_index(inplace=True)
    data_cb = data_cb[~data_cb.index.duplicated(keep='last')]
    return data_cb



def get_coinbene_chart(coin, attribution, resolution):
    if not (isinstance(coin, str)):
        print(coin)
        raise  Exception("coin needs to be a string or a string array")

    #코인베네 최초 시점 2018-03-25 (이전 데이터 없음, 거래소 최초 만들어진 시기) 1521932400

    FROM_KST_AWARE = datetime.fromtimestamp(1521662400).astimezone(tz=pytz.timezone('Asia/Seoul'))
    # TO_KST_AWARE  =  datetime.fromtimestamp(1524805200).astimezone(tz=pytz.timezone('Asia/Seoul'))
    TO_KST_AWARE = datetime.now().astimezone(tz=pytz.timezone('Asia/Seoul'))
    until_datetime = TO_KST_AWARE - FROM_KST_AWARE
    lengthDays= until_datetime.days
    # from_stamp = 1521932400
    #https://a.coinbene.com/market/tradepair/tradeview/kline/history?symbol=BTCUSDT&resolution=60&from=1533220747&to=1533256747
    coinbene_chart_url_template =  'https://a.coinbene.com/market/tradepair/tradeview/kline/history?symbol={COIN}&resolution={RESOLUTION}&from={FROMSTAMP}&to={TOSTAMP}'
    to_stamp = datetime.now().astimezone(tz=pytz.timezone('Asia/Seoul')).replace(microsecond=0, second=0,minute=0)
    to_stamp_int = int(to_stamp.timestamp())
    # to_stamp_int = 1524803600
    until_stamp = to_stamp_int - 24 * 60 * 60 * lengthDays



    json_long_dict ={}
    prev_to = 0
    resolution_new = resolution * 60
    coinbene_CHART_FETCH_LENTGH = 86400 * 41
    os.makedirs('Coinbene_Save', exist_ok = True)
    pickle_prev ="Coinbene_Save/tab_" + coin+ "_" + str(resolution_new) + "_"+ "coinbene.pickle"
    if os.path.isfile(pickle_prev):
        print("reading.." + pickle_prev)
        with open(pickle_prev, 'rb') as f:
            json_long_dict = pickle.load(f)
        print(json_long_dict)
        json_long_key = list(json_long_dict.keys())
        json_long_values = list(json_long_dict.values())


    while (until_stamp < to_stamp_int and prev_to != to_stamp_int):
        prev_to = to_stamp_int
        url = coinbene_chart_url_template.format(COIN=coin,
                                                 RESOLUTION=resolution_new,
                                                 FROMSTAMP=str(1522267200) ,
                                                 TOSTAMP= str(to_stamp_int))
        retries_left = 3
        delay_between_retries = 5
        while retries_left > 0:
            try:
                buffer = BytesIO()
                c = pycurl.Curl()
                print(url)
                c.setopt(c.URL, url)
                c.setopt(pycurl.HTTPHEADER, [
                        'Origin: https://www.coinbene.com' ,
                        'NewOrigin: https://www.coinbene.com', 'Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
                        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',
                        'Content-Type: text/plain' ,'Accept: */*' ,'Referer: https://www.coinbene.com/',
                        'Connection: keep-alive' , 'timezone: 9', 'site: MAIN' 'lang: ko'
                        ])
                c.setopt(c.WRITEDATA, buffer)
                c.setopt(pycurl.SSL_VERIFYPEER, 0)
                c.setopt(pycurl.SSL_VERIFYHOST, 0)
                c.perform()
                c.close()
                body = buffer.getvalue()
                server_message = body.decode('utf-8')
                if 'error' in server_message:
                    continue
                else:
                    data = json.loads(server_message)
                    json_to_pandas(data)
                    time.sleep(0.1)
                    break
            except BaseException as e:
                retries_left -=1
                print('retrying...')
                time.sleep(delay_between_retries)
                raise e

    with open(pickle_prev, 'wb') as f:
        pickle.dump(data,f)

    return json_to_pandas(data)


if __name__ == "__main__":
    dfs = get_coinbene_chart('EOSUSDT', 'Close', 1)
    print(dfs)

